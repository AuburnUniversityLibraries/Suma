{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Suma comprises a set of tools, including a mobile tablet-based (i.e. Apple iPad) data collection application, that will allow library staff to collect, aggregate, and interactively analyze real-time data about the usage of physical space and services. This tool will support the collection of more fine-grained data about physical space usage patterns by supporting the annotation of users with \"activities.\" The data that this tool provides will allow the libraries to build on existing assessment practices by significantly improving our ability to analyze physical space usage trends against various milestones, as well as generating more dynamic and current data visualizations. As a result, this data can be both collected and utilized more frequently and at a much wider scope than before with relative ease. This project is currently being used at NC State as a pilot project for a wider deployment. Examples of the current and planned uses for this toolkit include the collection and analysis of data relating to: Building headcounts Reference desk transactions Experimental technology usage Media production activities Experimental furniture usage Disclaimer We have worked hard to make the code as stable as possible, but are eager to receive feedback on any issues you discover. While we at NCSU Libraries' have been using it in a production capacity since July 2011 with great success, and several other institutions have successfully implemented this code, you should still take appropriate precautions when deploying this application. These include but are not limited to carefully backing up databases, monitoring error logs, maintaining close relationships with users, and reporting any problems back to the project team. Thank you for helping to ensure that this project continues to grow. As a safeguard, all JSON input from the client is logged. This will lead to large log files, but it allows for data recovery in the case of database problems or improperly rejected data. See the information about \"JSON INPUT\" entries in LOGS.md for more information. We at NCSU Libraries have never needed to make use of this recovery feature. Documentation How to contribute? You want to contribute some code? Maybe some data reports, bug fixes, new clients, or even new core features? Awesome! Just contact us or fork the code on GitHub and create a pull request. Project URLs Project page: http://www.lib.ncsu.edu/dli/projects/spaceassesstool/ Repository: https://github.com/suma-project/suma Suma Community If you would like to be invited to a google group for the Suma users community, please email Joyce Chapman at joyce DOT chapman AT gmail DOT com Credits and contacts Bret Davidson (bddavids AT ncsu DOT edu)- Project lead. Jason Casden (casden AT gmail DOT com) \u2013 Project founder. Joyce Chapman (joyce DOT chapman AT gmail DOT com) \u2013 Community development and data analysis specialist. Rob Rucker \u2013 Project team member and our first stakeholder. Research Information Services department head responsible for NCSU D. H. Hill Libraries head counts and reference desk transactions. Eric McEachern \u2013 Backend developer, responsible for much of the development of the server-side components. Rusty Earl \u2013 Backend developer and technical consultant.","title":"Overview"},{"location":"#overview","text":"Suma comprises a set of tools, including a mobile tablet-based (i.e. Apple iPad) data collection application, that will allow library staff to collect, aggregate, and interactively analyze real-time data about the usage of physical space and services. This tool will support the collection of more fine-grained data about physical space usage patterns by supporting the annotation of users with \"activities.\" The data that this tool provides will allow the libraries to build on existing assessment practices by significantly improving our ability to analyze physical space usage trends against various milestones, as well as generating more dynamic and current data visualizations. As a result, this data can be both collected and utilized more frequently and at a much wider scope than before with relative ease. This project is currently being used at NC State as a pilot project for a wider deployment. Examples of the current and planned uses for this toolkit include the collection and analysis of data relating to: Building headcounts Reference desk transactions Experimental technology usage Media production activities Experimental furniture usage","title":"Overview"},{"location":"#disclaimer","text":"We have worked hard to make the code as stable as possible, but are eager to receive feedback on any issues you discover. While we at NCSU Libraries' have been using it in a production capacity since July 2011 with great success, and several other institutions have successfully implemented this code, you should still take appropriate precautions when deploying this application. These include but are not limited to carefully backing up databases, monitoring error logs, maintaining close relationships with users, and reporting any problems back to the project team. Thank you for helping to ensure that this project continues to grow. As a safeguard, all JSON input from the client is logged. This will lead to large log files, but it allows for data recovery in the case of database problems or improperly rejected data. See the information about \"JSON INPUT\" entries in LOGS.md for more information. We at NCSU Libraries have never needed to make use of this recovery feature.","title":"Disclaimer"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#how-to-contribute","text":"You want to contribute some code? Maybe some data reports, bug fixes, new clients, or even new core features? Awesome! Just contact us or fork the code on GitHub and create a pull request.","title":"How to contribute?"},{"location":"#project-urls","text":"Project page: http://www.lib.ncsu.edu/dli/projects/spaceassesstool/ Repository: https://github.com/suma-project/suma","title":"Project URLs"},{"location":"#suma-community","text":"If you would like to be invited to a google group for the Suma users community, please email Joyce Chapman at joyce DOT chapman AT gmail DOT com","title":"Suma Community"},{"location":"#credits-and-contacts","text":"Bret Davidson (bddavids AT ncsu DOT edu)- Project lead. Jason Casden (casden AT gmail DOT com) \u2013 Project founder. Joyce Chapman (joyce DOT chapman AT gmail DOT com) \u2013 Community development and data analysis specialist. Rob Rucker \u2013 Project team member and our first stakeholder. Research Information Services department head responsible for NCSU D. H. Hill Libraries head counts and reference desk transactions. Eric McEachern \u2013 Backend developer, responsible for much of the development of the server-side components. Rusty Earl \u2013 Backend developer and technical consultant.","title":"Credits and contacts"},{"location":"developer/","text":"Suma Developer Docs Developing New Reports New suma reports may be developed within the AngularJS framework or as standalone reports. Reports developed within AngularJS should follow the model of the included reports and use a PHP file to retrieve data from the Suma query server as well as AngularJS based controllers, services, directives, views, etc. These reports will also need to be integrated into the various build processes that are facilitated by the tools and libraries listed below and should include appropriate test coverage. However, if you are unfamiliar with these tools, particularly AngularJS, and you need to generate custom reports, it is possible to do so using whatever visualization and data processing tools you prefer. You will likely still want to use the ServerIO class discussed in the API and Data Retrieval documentation below. Apache Configuration Note If you plan on developing reports for inclusion in the Suma repository and will be making use of the Grunt build tools, you will need to add a virtual host in order to link to the .tmp directory that contains compiled style assets. For example, if you are using MAMP Pro as your development server, create a virtualhost alias for localhost as something like Alias /suma/analysis/src/styles \"/Applications/MAMP/htdocs/suma/analysis/.tmp/styles/\" . Please Note: the paths in the alias will depend on your development environment. See http://darrenhall.info/development/yeoman-and-mamp for more information. Reports Dependencies/Tools AngularJS Node.js Bundler Bower Grunt Mocha SinonJS ChaiJS PHPUnit Installing Reports Dependencies From the analysis directory: Install Node.js, PHP, PHPUnit, Ruby, and Bundler bundle install npm install npm install -g grunt-cli You can now run grunt to build and test the analysis tools. New Report Configuration Settings Any new report that has external configuration settings should utilize the config.yaml file at analysis/config/config.yaml . Be sure to add your config settings to config_example.yaml as well. Each report should be namespaced as follows: nightly: timezone: America/New_York displayFormat: m-d-Y recipients: bddavids@ncsu.edu errorRecipients: bddavids@ncsu.edu See the nightly report or view the docs on the spyc library for importing YAML configs into PHP. API and Data Retrieval Most reports will utilize the ServerIO class to extract data from the Suma Query Server. In order to utilize this class, include the ServerIO.php file in your data processing code. Reports that will be added to the Suma repository should place their data processing code in the analysis/src/lib/php directory, which can then be accessed from within a new AngularJS service via HTTP. Custom reports that will be used outside of the Suma repository can still use the ServerIO class to extract data from Suma. The following methods are provided by ServerIO: ServerIO::getData($params, $queryType) $params is an associative array of Suma Query Server parameters $queryType specifies the type of query to perform, either 'sessions' or 'counts' Returns a PHP array representation of the data returned from the Suma Query Server ServerIO::getInitiatives() Returns array representation of all initiatives that can be queried Keys include: 'id', 'title', 'description'","title":"Developer"},{"location":"developer/#suma-developer-docs","text":"","title":"Suma Developer Docs"},{"location":"developer/#developing-new-reports","text":"New suma reports may be developed within the AngularJS framework or as standalone reports. Reports developed within AngularJS should follow the model of the included reports and use a PHP file to retrieve data from the Suma query server as well as AngularJS based controllers, services, directives, views, etc. These reports will also need to be integrated into the various build processes that are facilitated by the tools and libraries listed below and should include appropriate test coverage. However, if you are unfamiliar with these tools, particularly AngularJS, and you need to generate custom reports, it is possible to do so using whatever visualization and data processing tools you prefer. You will likely still want to use the ServerIO class discussed in the API and Data Retrieval documentation below.","title":"Developing New Reports"},{"location":"developer/#apache-configuration-note","text":"If you plan on developing reports for inclusion in the Suma repository and will be making use of the Grunt build tools, you will need to add a virtual host in order to link to the .tmp directory that contains compiled style assets. For example, if you are using MAMP Pro as your development server, create a virtualhost alias for localhost as something like Alias /suma/analysis/src/styles \"/Applications/MAMP/htdocs/suma/analysis/.tmp/styles/\" . Please Note: the paths in the alias will depend on your development environment. See http://darrenhall.info/development/yeoman-and-mamp for more information.","title":"Apache Configuration Note"},{"location":"developer/#reports-dependenciestools","text":"AngularJS Node.js Bundler Bower Grunt Mocha SinonJS ChaiJS PHPUnit","title":"Reports Dependencies/Tools"},{"location":"developer/#installing-reports-dependencies","text":"From the analysis directory: Install Node.js, PHP, PHPUnit, Ruby, and Bundler bundle install npm install npm install -g grunt-cli You can now run grunt to build and test the analysis tools.","title":"Installing Reports Dependencies"},{"location":"developer/#new-report-configuration-settings","text":"Any new report that has external configuration settings should utilize the config.yaml file at analysis/config/config.yaml . Be sure to add your config settings to config_example.yaml as well. Each report should be namespaced as follows: nightly: timezone: America/New_York displayFormat: m-d-Y recipients: bddavids@ncsu.edu errorRecipients: bddavids@ncsu.edu See the nightly report or view the docs on the spyc library for importing YAML configs into PHP.","title":"New Report Configuration Settings"},{"location":"developer/#api-and-data-retrieval","text":"Most reports will utilize the ServerIO class to extract data from the Suma Query Server. In order to utilize this class, include the ServerIO.php file in your data processing code. Reports that will be added to the Suma repository should place their data processing code in the analysis/src/lib/php directory, which can then be accessed from within a new AngularJS service via HTTP. Custom reports that will be used outside of the Suma repository can still use the ServerIO class to extract data from Suma. The following methods are provided by ServerIO: ServerIO::getData($params, $queryType) $params is an associative array of Suma Query Server parameters $queryType specifies the type of query to perform, either 'sessions' or 'counts' Returns a PHP array representation of the data returned from the Suma Query Server ServerIO::getInitiatives() Returns array representation of all initiatives that can be queried Keys include: 'id', 'title', 'description'","title":"API and Data Retrieval"},{"location":"faq/","text":"Frequently Asked Questions Data Collection Client Is there a way to capture more than one count at a time? The Suma data collection client has a hidden 'multiCount' feature that enables the capture of multiple counts with the same activities. To access this feature, append the query string ?multiCount=true to the URL of your instance of the Suma data collection client, e.g. YOUR_SUMA_CLIENT_URL/?multiCount=true. Please note that all counts will have the same timestamp. We recommended that this feature be used cautiously, as it is much easier to enter large amounts of data this way. Use at your own risk! Analysis Tools How is data captured and represented in Suma? The core data collection construct in Suma is the count , which typically represents an observation of, or interaction with, a patron. A count is captured every time the count button is tapped in the Suma data collection client. This action captures a timestamp and creates associations between the count and its locations and activities, depending on how a particular data collection initiative is configured. It's best to think about the count as an action, which may record any number of observed subjects (including zero). In the Suma client, the count button always records counts of 1, but that is only a convention. For example, when a location is selected in the Suma client, a count of 0 is registered. This count will be replaced by the first count, but will remain if there are no counts submitted for this location. This will result in a larger number of counts than observed transactions, since one count will include 0 observed transactions. In summary, counts are a counting action, not a total of observed subjects. What are sessions? Each count is associated with a session , which is the data collection period that starts when the start collection action is taken in the data collection client and ends when the finish collecting action is taken in the data collection client. Sessions serve as a way of grouping counts across arbitrary times. Sessions will be automatically ended when switching initiatives or closing the browser. While a head count, for example, may correspond to a single session, this is not necessarily always true (e.g. the counter is interrupted by a user and then records the transaction in another initiative before continuing the count). In the analysis tools, data is first returned from the queryserver grouped by sessions. If any part of a session intersects with the selected date or time filters, it is included in the queryserver results. The analysis tools filters are then applied to these results. The \"Classify Counts By\" and \"Always Include Whole Session\" filters play an important role in determining if an individual count is displayed in the analysis tools. What is the \"Classify Counts By\" filter? This filter determines which time to use when filtering counts, and will change the way individual counts are represented in the report and may create unexpected results. Both count times and dates may be affected. Three times are available: the start time of the session, the end time of the session, and the timestamp of the count. The assigned time will be used in evaluting individual counts for inclusion in the analysis results. In general, this filter should be set to the count timestamp. Session end time should only be used for midnight (crossing day boundaries) analyses and session start is included for completeness. What is the \"Always Include Whole Session\" filter? This filter determines whether or not to include all counts from sessions that extend beyond the selected date and time filters. At least one count in a session must overlap with the selected date and time filters for the session to be included in the displayed results. Once a session is included in a result set, this filter will ignore date and time filters if a session contains counts outside of the selected ranges. In some instances, for example when analyzing overnight counts, initiatives that may have some slight variance in start time, or sampling based initiatives like headcounts, it can be useful to force the analysis tools to include all counts in the sessions that are returned. Another example is the analysis of head counts, where the start and end time may fall outside of a given window (say, 10:00-11:00 for a 10:00am head count), but you want any session that overlaps with the date or time range to be included in its entirety. What is the difference between \"null\" and \"zero\" counts? Suma distinguishes between null and zero . This allows observations of zero to be made, for example, when a particular space is empty. When a location is selected in the Suma client, a count of 0 is initially registered to say that \"the space has been observed, and no one was there.\" This allows us to incorporate empty spaces into calculations about average space utilization. How does the \"Use Zero Counts for Locations\" filter work? It is possible to observe zero when using Suma, but these observations may not be desirable to include in the calculation of averages for locations. This filter will control if zero counts are included in the denominator when calculating averages and percentages for locations only . How does the \"Start 24-Hour Day\" filter work? This filter allows for the selection of an arbitrary start time for a 24-Hour period. Count dates will be adjusted backwards one day if their time is earlier than this value. An extra day will automatically be included in the result set to complete the last day. This filter changes the way individual counts are represented in the report and may create unexpected results. Only count dates will be modified. How do the activity and location filters work? Each count has a single location and may have several activities associated with it. The analysis tools include a variety of filtering options to select subsets of counts based on activity and location combinations. The location filter supports the inclusion or exclusion of children locations, and will respond appropriately to user input. Please note that the activity filters are applied to the count itself. For example, if a count has three activities, and one activity is excluded in the filter and the other two are allowed , then the count will not be included in the result set. Also, exclude overrides require . This is important to remember when analyzing initiatives that allow multiple selections within one activity group. How do I do a \"midnight\" report for a single day? Some initiatives may regularly have collection sessions that intersect with midnight and cross two different days. In order to isolate these collection sessions, use the following filters: 1) Set \"Classify Counts By\" to \"Session End\" 2) Set \"Always Include Whole Session\" to \"Yes\" 3) Set the \"Start Date\" and \"End Date\" to the date of the midnight hour of the day you are analyzing. 4) Set the \"No Counts Before\" filter to \"0000\" and the \"No Counts After\" filter to \"0100\". This assumes you are doing an hourly observation. You may want to include some buffer time depending on your collection activities. How should I analyze sampling based initiatives like headcounts? Some initiatives collect data at regular intervals througout the day. For these initiatives, sessions are very important for generating accurate reports. 1) Set \"Always Include Whole Session\" to \"Yes\" 2) Set \"Classify Counts By\" to \"Count\" (default) Why is the \"Total Sum\" and \"Total # of Counts\" Different in the Summary Data As mentioned above, a count in Suma is the action of making an observation. In some cases, the observed value is 0. As a result, \"Total # of Counts\" represents the total number of observations made and \"Total Sum\" represents the sum of the observed values. What is the difference between \"Avg of Sum\" and \"Avg of Avg\" in the Locations and Activities bar chart? The \"Avg of Sum\" value is calculated by adding all of the daily totals and dividing by the number of days in the time period. The \"Avg of Avg\" value is calculated by adding all of the daily averages and dividing by the number of days in the time period. The daily average is the sum of each session in a day divided by the number of sessions in that day. \"Avg of Avg\" is useful when examining initiatvies that are more census oriented, like headcounts. \"Avg of Sum\" is useful for exploring initiatives that have more constant data collection, like reference desk transactions. In the Hourly Report, how are averages calculated? The three display buttons break down like this: 1) Avg Counts : This average shows the total number of observations during each hour over the entire period divided by the number of the weekdays in which there were actually observations. This number will often be higher than Avg Days. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 7/(2 Sundays with counts) = 3.5 2) Avg Days : This average shows the total number of observations during each hour over the entire period divided by the actual number of weekdays in the period. This number will often be lower than Avg Counts. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 7/(3 Sundays in the period) = 2.33 3) Sum : This is straightforward, it will display the total number of observations during each hour over the entire period. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 5+2=7 How do I export raw data from Suma? For a CSV export, please use the Raw Export report in the analysis tools. To access the Suma JSON API, please see the Suma Queryserver Documentation .","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#data-collection-client","text":"","title":"Data Collection Client"},{"location":"faq/#is-there-a-way-to-capture-more-than-one-count-at-a-time","text":"The Suma data collection client has a hidden 'multiCount' feature that enables the capture of multiple counts with the same activities. To access this feature, append the query string ?multiCount=true to the URL of your instance of the Suma data collection client, e.g. YOUR_SUMA_CLIENT_URL/?multiCount=true. Please note that all counts will have the same timestamp. We recommended that this feature be used cautiously, as it is much easier to enter large amounts of data this way. Use at your own risk!","title":"Is there a way to capture more than one count at a time?"},{"location":"faq/#analysis-tools","text":"","title":"Analysis Tools"},{"location":"faq/#how-is-data-captured-and-represented-in-suma","text":"The core data collection construct in Suma is the count , which typically represents an observation of, or interaction with, a patron. A count is captured every time the count button is tapped in the Suma data collection client. This action captures a timestamp and creates associations between the count and its locations and activities, depending on how a particular data collection initiative is configured. It's best to think about the count as an action, which may record any number of observed subjects (including zero). In the Suma client, the count button always records counts of 1, but that is only a convention. For example, when a location is selected in the Suma client, a count of 0 is registered. This count will be replaced by the first count, but will remain if there are no counts submitted for this location. This will result in a larger number of counts than observed transactions, since one count will include 0 observed transactions. In summary, counts are a counting action, not a total of observed subjects.","title":"How is data captured and represented in Suma?"},{"location":"faq/#what-are-sessions","text":"Each count is associated with a session , which is the data collection period that starts when the start collection action is taken in the data collection client and ends when the finish collecting action is taken in the data collection client. Sessions serve as a way of grouping counts across arbitrary times. Sessions will be automatically ended when switching initiatives or closing the browser. While a head count, for example, may correspond to a single session, this is not necessarily always true (e.g. the counter is interrupted by a user and then records the transaction in another initiative before continuing the count). In the analysis tools, data is first returned from the queryserver grouped by sessions. If any part of a session intersects with the selected date or time filters, it is included in the queryserver results. The analysis tools filters are then applied to these results. The \"Classify Counts By\" and \"Always Include Whole Session\" filters play an important role in determining if an individual count is displayed in the analysis tools.","title":"What are sessions?"},{"location":"faq/#what-is-the-classify-counts-by-filter","text":"This filter determines which time to use when filtering counts, and will change the way individual counts are represented in the report and may create unexpected results. Both count times and dates may be affected. Three times are available: the start time of the session, the end time of the session, and the timestamp of the count. The assigned time will be used in evaluting individual counts for inclusion in the analysis results. In general, this filter should be set to the count timestamp. Session end time should only be used for midnight (crossing day boundaries) analyses and session start is included for completeness.","title":"What is the \"Classify Counts By\" filter?"},{"location":"faq/#what-is-the-always-include-whole-session-filter","text":"This filter determines whether or not to include all counts from sessions that extend beyond the selected date and time filters. At least one count in a session must overlap with the selected date and time filters for the session to be included in the displayed results. Once a session is included in a result set, this filter will ignore date and time filters if a session contains counts outside of the selected ranges. In some instances, for example when analyzing overnight counts, initiatives that may have some slight variance in start time, or sampling based initiatives like headcounts, it can be useful to force the analysis tools to include all counts in the sessions that are returned. Another example is the analysis of head counts, where the start and end time may fall outside of a given window (say, 10:00-11:00 for a 10:00am head count), but you want any session that overlaps with the date or time range to be included in its entirety.","title":"What is the \"Always Include Whole Session\" filter?"},{"location":"faq/#what-is-the-difference-between-null-and-zero-counts","text":"Suma distinguishes between null and zero . This allows observations of zero to be made, for example, when a particular space is empty. When a location is selected in the Suma client, a count of 0 is initially registered to say that \"the space has been observed, and no one was there.\" This allows us to incorporate empty spaces into calculations about average space utilization.","title":"What is the difference between \"null\" and \"zero\" counts?"},{"location":"faq/#how-does-the-use-zero-counts-for-locations-filter-work","text":"It is possible to observe zero when using Suma, but these observations may not be desirable to include in the calculation of averages for locations. This filter will control if zero counts are included in the denominator when calculating averages and percentages for locations only .","title":"How does the \"Use Zero Counts for Locations\" filter work?"},{"location":"faq/#how-does-the-start-24-hour-day-filter-work","text":"This filter allows for the selection of an arbitrary start time for a 24-Hour period. Count dates will be adjusted backwards one day if their time is earlier than this value. An extra day will automatically be included in the result set to complete the last day. This filter changes the way individual counts are represented in the report and may create unexpected results. Only count dates will be modified.","title":"How does the \"Start 24-Hour Day\" filter work?"},{"location":"faq/#how-do-the-activity-and-location-filters-work","text":"Each count has a single location and may have several activities associated with it. The analysis tools include a variety of filtering options to select subsets of counts based on activity and location combinations. The location filter supports the inclusion or exclusion of children locations, and will respond appropriately to user input. Please note that the activity filters are applied to the count itself. For example, if a count has three activities, and one activity is excluded in the filter and the other two are allowed , then the count will not be included in the result set. Also, exclude overrides require . This is important to remember when analyzing initiatives that allow multiple selections within one activity group.","title":"How do the activity and location filters work?"},{"location":"faq/#how-do-i-do-a-midnight-report-for-a-single-day","text":"Some initiatives may regularly have collection sessions that intersect with midnight and cross two different days. In order to isolate these collection sessions, use the following filters: 1) Set \"Classify Counts By\" to \"Session End\" 2) Set \"Always Include Whole Session\" to \"Yes\" 3) Set the \"Start Date\" and \"End Date\" to the date of the midnight hour of the day you are analyzing. 4) Set the \"No Counts Before\" filter to \"0000\" and the \"No Counts After\" filter to \"0100\". This assumes you are doing an hourly observation. You may want to include some buffer time depending on your collection activities.","title":"How do I do a \"midnight\" report for a single day?"},{"location":"faq/#how-should-i-analyze-sampling-based-initiatives-like-headcounts","text":"Some initiatives collect data at regular intervals througout the day. For these initiatives, sessions are very important for generating accurate reports. 1) Set \"Always Include Whole Session\" to \"Yes\" 2) Set \"Classify Counts By\" to \"Count\" (default)","title":"How should I analyze sampling based initiatives like headcounts?"},{"location":"faq/#why-is-the-total-sum-and-total-of-counts-different-in-the-summary-data","text":"As mentioned above, a count in Suma is the action of making an observation. In some cases, the observed value is 0. As a result, \"Total # of Counts\" represents the total number of observations made and \"Total Sum\" represents the sum of the observed values.","title":"Why is the \"Total Sum\" and \"Total # of Counts\" Different in the Summary Data"},{"location":"faq/#what-is-the-difference-between-avg-of-sum-and-avg-of-avg-in-the-locations-and-activities-bar-chart","text":"The \"Avg of Sum\" value is calculated by adding all of the daily totals and dividing by the number of days in the time period. The \"Avg of Avg\" value is calculated by adding all of the daily averages and dividing by the number of days in the time period. The daily average is the sum of each session in a day divided by the number of sessions in that day. \"Avg of Avg\" is useful when examining initiatvies that are more census oriented, like headcounts. \"Avg of Sum\" is useful for exploring initiatives that have more constant data collection, like reference desk transactions.","title":"What is the difference between \"Avg of Sum\" and \"Avg of Avg\" in the Locations and Activities bar chart?"},{"location":"faq/#in-the-hourly-report-how-are-averages-calculated","text":"The three display buttons break down like this: 1) Avg Counts : This average shows the total number of observations during each hour over the entire period divided by the number of the weekdays in which there were actually observations. This number will often be higher than Avg Days. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 7/(2 Sundays with counts) = 3.5 2) Avg Days : This average shows the total number of observations during each hour over the entire period divided by the actual number of weekdays in the period. This number will often be lower than Avg Counts. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 7/(3 Sundays in the period) = 2.33 3) Sum : This is straightforward, it will display the total number of observations during each hour over the entire period. Example Scenario: 12 AM Sunday Week 1: 5 Week 2: Week 3: 2 Value will be 5+2=7","title":"In the Hourly Report, how are averages calculated?"},{"location":"faq/#how-do-i-export-raw-data-from-suma","text":"For a CSV export, please use the Raw Export report in the analysis tools. To access the Suma JSON API, please see the Suma Queryserver Documentation .","title":"How do I export raw data from Suma?"},{"location":"installation/","text":"Suma Install Instructions Experimental Virtual Machine We have released an experimental virtual Suma environment that can be used as a development or pilot testing environment on a desktop machine running Windows, OS X, or Linux. This may be a faster way to try Suma before following these installation instructions. We do not recommend this for production use. Requirements These requirements are based on our local testing. Earlier versions may also work: MySQL recommended version 5.5 Apache recommended version 2.4 PHP required version of at least 7.1.x (including cURL, mbstring, PDO, and DOM). Please note that different server operating systems may use different module names. If you are experiencing unexpected issues with Suma after installation, check your server logs for missing PHP modules. Zend Framework 1.12.20 - required for Suma server, included with Suma code Various Javascript Libraries - all included with Suma code Additional Client Requirements: Device or computer with WebKit browser (e.g. iOS and Android browsers, Google Chrome, Safari on Mac OS) needed to use Suma client. NOTE: Suma does not work in Safari for Windows. Download Suma You can find the latest Suma version on GitHub. Note path to suma download directory. We will refer to this as SUMA_DOWNLOAD_DIR Suma Software Installation (symbolic links, RECOMMENDED ) If your Apache configuration has the FollowSymLinks directive enabled, there is a simpler way to deploy Suma that also improves the update process. Clone the GitHub repository to a directory outside of your web space (e.g. /var/www/app/suma ) Create the following symbolic links from your web space to the local suma repository (these instructions make several assumptions about paths and directory names--please change as needed, noting the configuration directions later in this document): /var/www/htdocs/sumaserver/ => /var/www/app/suma/service/web/ /var/www/htdocs/suma/client/ => /var/www/app/suma/web/ /var/www/htdocs/suma/analysis/ => /var/www/app/suma/analysis/ Now all of your code is in one place, allowing you to update Suma by running git pull --rebase origin master . There is a chance this could result in merge conflicts with your local changes, so please allow for time to resolve these before updating. Suma Software Installation (file copying) For Suma Client Installation: Copy contents of /SUMA_DOWNLOAD_DIR/web to /YOUR_WEB_DIR/suma/web Copy contents of /SUMA_DOWNLOAD_DIR/analysis to /YOUR_WEB_DIR/suma/analysis For Suma Server Installation: Copy contents of /SUMA_DOWNLOAD_DIR/service to a location outside your web directory. For example, if your web directory is /var/www/htdocs you could copy the contents of the /SUMA_DOWNLOAD_DIR/service to /var/www/app/sumaserver . Note this location, we will refer to it later as SUMA_SERVER_INSTALL_DIR Copy contents of /SUMA_DOWNLOAD_DIR/service/web to /YOUR_WEB_DIR/sumaserver Apache Configuration You can configure your apache web server two ways using apache's configuration rewrite engine or using a .htaccess file Apache rewrite If using Apache's rewrite module add these lines in your web server (likely httpd.conf) configuration file <Directory \"/YOUR_WEB_DIR/sumaserver\"> RewriteEngine On RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] RewriteRule ^.*$ index.php [NC,L] </Directory> Don't forget to change YOUR_WEB_DIR to the directory in your web space that contains the service/web/ content Restart apache after adding these lines for configuration to apply. .htaccess If using a .htaccess place the file in the /YOUR_WEB_DIR/sumaserver directory and add these lines RewriteEngine on RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] RewriteRule ^.*$ index.php [NC,L] An example .htaccess file named can be found at /YOUR_WEB_DIR/sumaserver/htaccess_example . To use, copy the contents of this file to a new file named /YOUR_WEB_DIR/sumaserver/.htaccess . Database Setup It is recommended you create two databases for Suma. One for production and one for testing. The database instructions are the same for both except for changing the database name. Create database in MySQL using whatever tool you have available. Create two Suma accounts: One administrative account with SELECT , INSERT , CREATE , DROP , DELETE , UPDATE , INDEX , and ALTER permissions. This account is for initializing and modifying the database. Do not include this account in your Suma configuration. One application account with SELECT , INSERT , UPDATE , and INDEX permissions. Now you have to run a database initialization script included in the suma download. Find the file schema.sql in /SUMA_DOWNLOAD_LOCATION/service/config . Run that script to initialize database, create suma tables, and establish foreign key constraints. To run it you can use the command line MySQL tools, phpmyadmin, or any other database management tool you like. This should be imported using the Suma administration MySQL account. Optional, but recommended: If you wish to initialize the database with preloaded sample data so you can play around with Suma more quickly, then run the schema_w_sample.sql script instead of schema.sql . Suma Server Software Configuration service/web/config/config.yaml In the /SUMA_SERVER_INSTALL_DIR/web/config/ directory, copy config_example.yaml to a new file config.yaml . You must set some path variables in the config.yaml file for the Suma server to function correctly. SUMA_SERVER_PATH must be set to the SUMA_SERVER_INSTALL_DIR where the Suma server was installed earlier in these instructions (e.g. /var/www/app/sumaserver ). SUMA_CONTROLLER_PATH must be set to SUMA_SERVER_INSTALL_DIR/controllers (e.g. /var/www/app/sumaserver/controllers ). SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver . SUMA_DEBUG can be set to true if you would like to see more verbose error messages. This should generally be set to false . service/config/config.yaml In the SUMA_SERVER_INSTALL_DIR/config/ directory, copy config_example.yaml to a new file config.yaml . You must modify the following: production: sumaserver: db: host: host location of your mysql database dbname: suma mysql database name user: suma mysql **application** account name pword: suma mysql **application** account password port: mysql port number log: path: path to log directory name: sumaserver.log Be sure that the log directory specified in sumaserver:log:path both exists and is writable by the web server . If using SELinux, please see the Suma Troubleshooting docs for more guidance. services/config/session.yaml This is an optional file to increase session security and allow the specification of custom session properties. In the /SUMA_SERVER_INSTALL_DIR/services/config/ directory, copy session_example.yaml to a new file session.yaml . SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver . Suma Client Configuration web/config/spaceassessConfig.js In the YOUR_WEB_DIR/suma/web/config/ directory, copy spaceassessConfig_example.js to a new file spaceassessConfig.js . If the Suma server URL is anything other than http://YOUR_HOST/sumaserver , you will need to change the paths at the top of YOUR_WEB_DIR/suma/web/config/spaceassessConfig.js . Suma Analysis Tools Configuration analysis/config/config.yaml In the YOUR_WEB_DIR/suma/analysis/config/ directory, copy config_example.yaml to a new file config.yaml . Change baseUrl to the URL for your Suma Query Server. If you used a directory other than sumaserver in the \"Suma Software Installation\" section above, that should be reflected in this URL. You can view the Suma analysis tools by visting http://YOUR_SERVER/suma/analysis/reports . To configure the nightly summary report: In the YOUR_WEB_DIR/suma/analysis/config/config.yaml file, edit the timezone, displayFormat, recipients, errorRecipients, emailFrom, emailSubj as needed. See http://php.net/manual/en/timezones.php for information on timezone formats. Using cron, or some other scheduler, schedule a task to run the YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php script as desired. This command-line script takes several optional arguments and flags to configure the report: locations : display hourly reports broken down by location, plus a total --hide-zeros : do not display data for hours or locations with no activity --hours-across : display hours from left-to-right instead of the default top-to-bottom in the report --html : formats the report as in HTML rather than plain text (strongly recommended for use when using the 'hours-across' and/or 'locations' options --tab : formats the report as tab-delimited text. If both --html and --tab flags are set, the --html flag will be ignored and the --tab flag will be respected --omit-header : do not display column or section headers in report; only display hourly counts; best when used for only one initiative at a time, to avoid confusion --prepend-date : include a column giving the report date at the beginning of each line; ideal for use with the --omit-header flag --report-inits : limit reporting to one or more initiative(s); identify the initiative(s) by name, comma separated, e.g.: **--report-inits=\"Head Counts\" or *--report-inits=\"Reference Transactions\",\"Head Counts\" --report-date : select the date for which to report; default is \"yesterday\"; any machine readable date format is acceptable, e.g. --report-date=2018-03-11 or --report-date=\"March 11, 2018\" --start-hour : choose the hour with which a reporting period starts. Default is 0000 hours. Examples of nightlyEmail.php configuration include: YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php locations --html YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --hide-zeros YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --hours-across --hide-zeros --html --start-hour=0400 YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --tab --omit-header --prepend-date --report-date=2018-03-11 --report-inits=\"Head Counts\" Alternatively, YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightly.php may be run from the command line for quick reporting through stdout, using the same flags, e.g.: php YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightly.php --tab --omit-header --prepend-date --report-date=2018-03-11 --report-inits=\"Head Counts\" This approach is especially useful if you want to use a shell script to report on multiple consecutive dates. Other Things You Can Configure The configuration protocol allows for development/testing settings that can override the production settings. To switch from using production settings to dev/testing settings, on the line in /SUMA_SERVER_INSTALL_DIR/config/Globals.php self::$_config = new Zend_Config_Yaml($yamlFile, 'production'); you must change 'production' to 'development'. If you're getting generic error messages from the suma server you can change the SUMA_DEBUG setting in /YOUR_WEB_DIR/sumaserver/config/config.yaml to true to generate more descriptive error messages. Be sure to change this setting back before you use Suma in production How to create your first initiative Log in to the administrative console (see below) Create and populate a location tree by clicking on the \"Edit locations\" link Create and populate an initiative by clicking on the \"Edit initiatives\" link (don't forget also to enable the initiative using this tool) Collect some data using the Suma client ( http://YOUR_SERVER/suma/web ) with a WebKit-based browser (e.g. Chrome, Safari, or iOS and Android browsers) View your session log in the \"Sessions list\" page linked from the administrative console Analyze your data using the analysis tools ( http://YOUR_SERVER/suma/analysis/reports ) Overview of administrative tools To view the admin tools, visit the page at http://YOUR_SERVER/sumaserver/admin/ . The username and password for these tools is set in config.yaml. Location editor The location editor allows you to create location trees, create and arrange the location hierarchy and update titles and descriptions. Initiative editor The initiative editor allows you to create initiatives and activities, change titles and descriptions, and modify the order in which activities are displayed. Sessions list The sessions list is a human-readable session log. Direct JSON import This direct JSON import tool will allow you to paste JSON data into a web form and import it into Suma. Useful for recovery from log data.","title":"Installation"},{"location":"installation/#suma-install-instructions","text":"","title":"Suma Install Instructions"},{"location":"installation/#experimental-virtual-machine","text":"We have released an experimental virtual Suma environment that can be used as a development or pilot testing environment on a desktop machine running Windows, OS X, or Linux. This may be a faster way to try Suma before following these installation instructions. We do not recommend this for production use.","title":"Experimental Virtual Machine"},{"location":"installation/#requirements","text":"These requirements are based on our local testing. Earlier versions may also work: MySQL recommended version 5.5 Apache recommended version 2.4 PHP required version of at least 7.1.x (including cURL, mbstring, PDO, and DOM). Please note that different server operating systems may use different module names. If you are experiencing unexpected issues with Suma after installation, check your server logs for missing PHP modules. Zend Framework 1.12.20 - required for Suma server, included with Suma code Various Javascript Libraries - all included with Suma code Additional Client Requirements: Device or computer with WebKit browser (e.g. iOS and Android browsers, Google Chrome, Safari on Mac OS) needed to use Suma client. NOTE: Suma does not work in Safari for Windows.","title":"Requirements"},{"location":"installation/#download-suma","text":"You can find the latest Suma version on GitHub. Note path to suma download directory. We will refer to this as SUMA_DOWNLOAD_DIR","title":"Download Suma"},{"location":"installation/#suma-software-installation-symbolic-links-recommended","text":"If your Apache configuration has the FollowSymLinks directive enabled, there is a simpler way to deploy Suma that also improves the update process. Clone the GitHub repository to a directory outside of your web space (e.g. /var/www/app/suma ) Create the following symbolic links from your web space to the local suma repository (these instructions make several assumptions about paths and directory names--please change as needed, noting the configuration directions later in this document): /var/www/htdocs/sumaserver/ => /var/www/app/suma/service/web/ /var/www/htdocs/suma/client/ => /var/www/app/suma/web/ /var/www/htdocs/suma/analysis/ => /var/www/app/suma/analysis/ Now all of your code is in one place, allowing you to update Suma by running git pull --rebase origin master . There is a chance this could result in merge conflicts with your local changes, so please allow for time to resolve these before updating.","title":"Suma Software Installation (symbolic links, RECOMMENDED)"},{"location":"installation/#suma-software-installation-file-copying","text":"For Suma Client Installation: Copy contents of /SUMA_DOWNLOAD_DIR/web to /YOUR_WEB_DIR/suma/web Copy contents of /SUMA_DOWNLOAD_DIR/analysis to /YOUR_WEB_DIR/suma/analysis For Suma Server Installation: Copy contents of /SUMA_DOWNLOAD_DIR/service to a location outside your web directory. For example, if your web directory is /var/www/htdocs you could copy the contents of the /SUMA_DOWNLOAD_DIR/service to /var/www/app/sumaserver . Note this location, we will refer to it later as SUMA_SERVER_INSTALL_DIR Copy contents of /SUMA_DOWNLOAD_DIR/service/web to /YOUR_WEB_DIR/sumaserver","title":"Suma Software Installation (file copying)"},{"location":"installation/#apache-configuration","text":"You can configure your apache web server two ways using apache's configuration rewrite engine or using a .htaccess file Apache rewrite If using Apache's rewrite module add these lines in your web server (likely httpd.conf) configuration file <Directory \"/YOUR_WEB_DIR/sumaserver\"> RewriteEngine On RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] RewriteRule ^.*$ index.php [NC,L] </Directory> Don't forget to change YOUR_WEB_DIR to the directory in your web space that contains the service/web/ content Restart apache after adding these lines for configuration to apply. .htaccess If using a .htaccess place the file in the /YOUR_WEB_DIR/sumaserver directory and add these lines RewriteEngine on RewriteCond %{REQUEST_FILENAME} -s [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] RewriteRule ^.*$ index.php [NC,L] An example .htaccess file named can be found at /YOUR_WEB_DIR/sumaserver/htaccess_example . To use, copy the contents of this file to a new file named /YOUR_WEB_DIR/sumaserver/.htaccess .","title":"Apache Configuration"},{"location":"installation/#database-setup","text":"It is recommended you create two databases for Suma. One for production and one for testing. The database instructions are the same for both except for changing the database name. Create database in MySQL using whatever tool you have available. Create two Suma accounts: One administrative account with SELECT , INSERT , CREATE , DROP , DELETE , UPDATE , INDEX , and ALTER permissions. This account is for initializing and modifying the database. Do not include this account in your Suma configuration. One application account with SELECT , INSERT , UPDATE , and INDEX permissions. Now you have to run a database initialization script included in the suma download. Find the file schema.sql in /SUMA_DOWNLOAD_LOCATION/service/config . Run that script to initialize database, create suma tables, and establish foreign key constraints. To run it you can use the command line MySQL tools, phpmyadmin, or any other database management tool you like. This should be imported using the Suma administration MySQL account. Optional, but recommended: If you wish to initialize the database with preloaded sample data so you can play around with Suma more quickly, then run the schema_w_sample.sql script instead of schema.sql .","title":"Database Setup"},{"location":"installation/#suma-server-software-configuration","text":"service/web/config/config.yaml In the /SUMA_SERVER_INSTALL_DIR/web/config/ directory, copy config_example.yaml to a new file config.yaml . You must set some path variables in the config.yaml file for the Suma server to function correctly. SUMA_SERVER_PATH must be set to the SUMA_SERVER_INSTALL_DIR where the Suma server was installed earlier in these instructions (e.g. /var/www/app/sumaserver ). SUMA_CONTROLLER_PATH must be set to SUMA_SERVER_INSTALL_DIR/controllers (e.g. /var/www/app/sumaserver/controllers ). SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver . SUMA_DEBUG can be set to true if you would like to see more verbose error messages. This should generally be set to false . service/config/config.yaml In the SUMA_SERVER_INSTALL_DIR/config/ directory, copy config_example.yaml to a new file config.yaml . You must modify the following: production: sumaserver: db: host: host location of your mysql database dbname: suma mysql database name user: suma mysql **application** account name pword: suma mysql **application** account password port: mysql port number log: path: path to log directory name: sumaserver.log Be sure that the log directory specified in sumaserver:log:path both exists and is writable by the web server . If using SELinux, please see the Suma Troubleshooting docs for more guidance. services/config/session.yaml This is an optional file to increase session security and allow the specification of custom session properties. In the /SUMA_SERVER_INSTALL_DIR/services/config/ directory, copy session_example.yaml to a new file session.yaml . SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver .","title":"Suma Server Software Configuration"},{"location":"installation/#suma-client-configuration","text":"web/config/spaceassessConfig.js In the YOUR_WEB_DIR/suma/web/config/ directory, copy spaceassessConfig_example.js to a new file spaceassessConfig.js . If the Suma server URL is anything other than http://YOUR_HOST/sumaserver , you will need to change the paths at the top of YOUR_WEB_DIR/suma/web/config/spaceassessConfig.js .","title":"Suma Client Configuration"},{"location":"installation/#suma-analysis-tools-configuration","text":"analysis/config/config.yaml In the YOUR_WEB_DIR/suma/analysis/config/ directory, copy config_example.yaml to a new file config.yaml . Change baseUrl to the URL for your Suma Query Server. If you used a directory other than sumaserver in the \"Suma Software Installation\" section above, that should be reflected in this URL. You can view the Suma analysis tools by visting http://YOUR_SERVER/suma/analysis/reports . To configure the nightly summary report: In the YOUR_WEB_DIR/suma/analysis/config/config.yaml file, edit the timezone, displayFormat, recipients, errorRecipients, emailFrom, emailSubj as needed. See http://php.net/manual/en/timezones.php for information on timezone formats. Using cron, or some other scheduler, schedule a task to run the YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php script as desired. This command-line script takes several optional arguments and flags to configure the report: locations : display hourly reports broken down by location, plus a total --hide-zeros : do not display data for hours or locations with no activity --hours-across : display hours from left-to-right instead of the default top-to-bottom in the report --html : formats the report as in HTML rather than plain text (strongly recommended for use when using the 'hours-across' and/or 'locations' options --tab : formats the report as tab-delimited text. If both --html and --tab flags are set, the --html flag will be ignored and the --tab flag will be respected --omit-header : do not display column or section headers in report; only display hourly counts; best when used for only one initiative at a time, to avoid confusion --prepend-date : include a column giving the report date at the beginning of each line; ideal for use with the --omit-header flag --report-inits : limit reporting to one or more initiative(s); identify the initiative(s) by name, comma separated, e.g.: **--report-inits=\"Head Counts\" or *--report-inits=\"Reference Transactions\",\"Head Counts\" --report-date : select the date for which to report; default is \"yesterday\"; any machine readable date format is acceptable, e.g. --report-date=2018-03-11 or --report-date=\"March 11, 2018\" --start-hour : choose the hour with which a reporting period starts. Default is 0000 hours. Examples of nightlyEmail.php configuration include: YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php locations --html YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --hide-zeros YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --hours-across --hide-zeros --html --start-hour=0400 YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php --tab --omit-header --prepend-date --report-date=2018-03-11 --report-inits=\"Head Counts\" Alternatively, YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightly.php may be run from the command line for quick reporting through stdout, using the same flags, e.g.: php YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightly.php --tab --omit-header --prepend-date --report-date=2018-03-11 --report-inits=\"Head Counts\" This approach is especially useful if you want to use a shell script to report on multiple consecutive dates.","title":"Suma Analysis Tools Configuration"},{"location":"installation/#other-things-you-can-configure","text":"The configuration protocol allows for development/testing settings that can override the production settings. To switch from using production settings to dev/testing settings, on the line in /SUMA_SERVER_INSTALL_DIR/config/Globals.php self::$_config = new Zend_Config_Yaml($yamlFile, 'production'); you must change 'production' to 'development'. If you're getting generic error messages from the suma server you can change the SUMA_DEBUG setting in /YOUR_WEB_DIR/sumaserver/config/config.yaml to true to generate more descriptive error messages. Be sure to change this setting back before you use Suma in production","title":"Other Things You Can Configure"},{"location":"installation/#how-to-create-your-first-initiative","text":"Log in to the administrative console (see below) Create and populate a location tree by clicking on the \"Edit locations\" link Create and populate an initiative by clicking on the \"Edit initiatives\" link (don't forget also to enable the initiative using this tool) Collect some data using the Suma client ( http://YOUR_SERVER/suma/web ) with a WebKit-based browser (e.g. Chrome, Safari, or iOS and Android browsers) View your session log in the \"Sessions list\" page linked from the administrative console Analyze your data using the analysis tools ( http://YOUR_SERVER/suma/analysis/reports )","title":"How to create your first initiative"},{"location":"installation/#overview-of-administrative-tools","text":"To view the admin tools, visit the page at http://YOUR_SERVER/sumaserver/admin/ . The username and password for these tools is set in config.yaml. Location editor The location editor allows you to create location trees, create and arrange the location hierarchy and update titles and descriptions. Initiative editor The initiative editor allows you to create initiatives and activities, change titles and descriptions, and modify the order in which activities are displayed. Sessions list The sessions list is a human-readable session log. Direct JSON import This direct JSON import tool will allow you to paste JSON data into a web form and import it into Suma. Useful for recovery from log data.","title":"Overview of administrative tools"},{"location":"logs/","text":"Suma Logs Overview The log directory path and log file name must be set in service/config/config.ini The log file must also be created with write permissions for the web server user. Log actions Info JSON INPUT - Input string sent to server from client. SESSION INSERT - New database session entry. COUNT INSERT - New database count entry. C_A_JOIN INSERT - New database count_activity_join entry. SESSION COMMITTED - Session committed to database. ACTIVITY ENABLED - Activity flagged as enabled. ACTIVITY DISABLED - Activity flagged as disabled. ACTIVITY CREATED - New database activity entry. ACTIVITY GROUP CREATED - New database activity_group entry. ACTIVITY GROUP UPDATED - Activity Group updated. INITIATIVE ENABLED - Initiative flagged as enabled. INITIATIVE DISABLED - Initiative flagged as disabled. INITIATIVE UPDATED - Initiative updated. INITIATIVE ROOT SET - Initiative assigned a location root. INITIATIVE CREATED - New database initiative entry. LOCATION CREATED - New database location entry. LOCATION DISABLED - Location flagged as disabled. LOCATION ENABLED - Location flagged as enabled. Error MALFORMED JSON - Input string that does not follow the rules and conventions of JSON. SKIPPING INVALID/MALFORMED SESSION - Session input is improperly formed. NULL JSON ELEMENT(S) - Session missing critical component(s). INVALID INITIATIVE ID - Id is invalid because it is not numeric NONEXISTENT INITIATIVE - No initiative found with requested id. NONEXISTENT ACTIVITY - No activity found with requested id. NONEXISTENT LOCATION - No location found with requested id. NONEXISTENT SESSION - No session found with requested id. NONEXISTENT ACTIVITY GROUP - No activity group found with requested id. Warning SKIPPING SESSION WITH INVALID INITIATIVE ID - Sessions references a nonexistent initiative. SKIPPING DUPLICATE SESSION - An identical session already exists in the database and is considered to have already been submitted. SESSION ROLLBACK - Internal database transaction rollback which spans a single session. Assuming unix timestamp is in milliseconds - Self explanatory. DUPLICATE ACTIVITY CREATION DENIED - Activity name conflict, must be unique. DUPLICATE INITIATIVE CREATION DENIED - Initiative name conflict, must be unique. FAILED ADMIN LOGIN - Invalid login credentials entered for admin page. CANNOT SET INITIATIVE ROOT, LOCATION DOES NOT EXIST - Necessary location not found. Debug TRANSACTION START - Start of server processing client input. TRANSACTION END - End of server processing client input.","title":"Logs"},{"location":"logs/#suma-logs","text":"","title":"Suma Logs"},{"location":"logs/#overview","text":"The log directory path and log file name must be set in service/config/config.ini The log file must also be created with write permissions for the web server user.","title":"Overview"},{"location":"logs/#log-actions","text":"Info JSON INPUT - Input string sent to server from client. SESSION INSERT - New database session entry. COUNT INSERT - New database count entry. C_A_JOIN INSERT - New database count_activity_join entry. SESSION COMMITTED - Session committed to database. ACTIVITY ENABLED - Activity flagged as enabled. ACTIVITY DISABLED - Activity flagged as disabled. ACTIVITY CREATED - New database activity entry. ACTIVITY GROUP CREATED - New database activity_group entry. ACTIVITY GROUP UPDATED - Activity Group updated. INITIATIVE ENABLED - Initiative flagged as enabled. INITIATIVE DISABLED - Initiative flagged as disabled. INITIATIVE UPDATED - Initiative updated. INITIATIVE ROOT SET - Initiative assigned a location root. INITIATIVE CREATED - New database initiative entry. LOCATION CREATED - New database location entry. LOCATION DISABLED - Location flagged as disabled. LOCATION ENABLED - Location flagged as enabled. Error MALFORMED JSON - Input string that does not follow the rules and conventions of JSON. SKIPPING INVALID/MALFORMED SESSION - Session input is improperly formed. NULL JSON ELEMENT(S) - Session missing critical component(s). INVALID INITIATIVE ID - Id is invalid because it is not numeric NONEXISTENT INITIATIVE - No initiative found with requested id. NONEXISTENT ACTIVITY - No activity found with requested id. NONEXISTENT LOCATION - No location found with requested id. NONEXISTENT SESSION - No session found with requested id. NONEXISTENT ACTIVITY GROUP - No activity group found with requested id. Warning SKIPPING SESSION WITH INVALID INITIATIVE ID - Sessions references a nonexistent initiative. SKIPPING DUPLICATE SESSION - An identical session already exists in the database and is considered to have already been submitted. SESSION ROLLBACK - Internal database transaction rollback which spans a single session. Assuming unix timestamp is in milliseconds - Self explanatory. DUPLICATE ACTIVITY CREATION DENIED - Activity name conflict, must be unique. DUPLICATE INITIATIVE CREATION DENIED - Initiative name conflict, must be unique. FAILED ADMIN LOGIN - Invalid login credentials entered for admin page. CANNOT SET INITIATIVE ROOT, LOCATION DOES NOT EXIST - Necessary location not found. Debug TRANSACTION START - Start of server processing client input. TRANSACTION END - End of server processing client input.","title":"Log actions"},{"location":"queryserver/","text":"Suma Query Server API options Query servers query/sessions By sending your request to the sessions query server (\"query/sessions\"), you will ensure that counts are grouped by session and that sessions are always complete. This is more useful for something where collecting sessions are important, such as with head counts. query/counts By sending your request to the count query server (\"query/counts\"), sessions are ignored. All date filters apply to counts, and no session data is returned. This is more useful for something where individual count timestamps are sufficient, such as with reference desk transactions. query/debugsessions A HTML display of the sessions query service. query/debugcounts A HTML display of the counts query service. GET parameters id: Initiative ID. sdate: Starting date range for query. If querying sessions, will return a session that overlaps with any part of the range, otherwise this will return only counts that are within the range. Format: YYYYMMDD, YYYYMMDDThhmm. edate: Ending date range for query. If querying sessions, will return a session that overlaps with any part of the range, otherwise this will return only counts that are within the range. Format: YYYYMMDD, YYYYMMDDThhmm. stime: Starting time slice (applies for all days in sdate/edate range). Format: hhmm (24-hour) etime: Ending time slice (applies for all days in sdate/edate range). Format: hhmm (24-hour) format: one of \"cal, cla, alc, lac, lca, ac, lc\" (see \"Return formats\" below). Default: \"cal\" sum: \"true\". If requesting a format where the count is at the deepest level (alc, lac, ac, lc), individual counts are combined where possible. While this does not preserve the timestamp for each count, it does result in a more compact set of data. Default: No summing. offset: Starting position of desired database result set limit: Maximum number of database rows to return (override server setting). The server config contains a default number of records to process per transaction. The analysis query library provides several methods to ease the process of stitching the full data set together across multiple requests. Increasing the limit will result in fewer requests to the server (improving performance), but it could also cause the Query Server process to exceed its memory limit, resulting in an error. Return formats Data is returned as JSON. Format names describe the nesting order of the count data. Data associations can be lost in some formats, and most of these are provided for succinctness and processing convenience. C = Counts A = Activities L = Locations CAL/CLA This is the most complete representation of the data. For each count, its activities, locations, and initiatives are listed. ALC For each activity, the locations where the activity has been recorded are listed. For each of these locations, the counts are listed. This may be useful for reports that focus on where certain activities take place. LAC For each location, the activities that have been recorded there are listed. For each of the activities, the counts are listed. This may be useful for reports that focus on what types of activities occur in a given location. LCA For each location, the counts for that location are listed. For each of those counts, any activities associated with the count are listed. This is like LAC, but maintains associations between activities. AC For each activity, its counts are listed. You don't need any locations. LC For each location, its counts are listed. You don't need any activities.","title":"Queryserver"},{"location":"queryserver/#suma-query-server","text":"","title":"Suma Query Server"},{"location":"queryserver/#api-options","text":"Query servers query/sessions By sending your request to the sessions query server (\"query/sessions\"), you will ensure that counts are grouped by session and that sessions are always complete. This is more useful for something where collecting sessions are important, such as with head counts. query/counts By sending your request to the count query server (\"query/counts\"), sessions are ignored. All date filters apply to counts, and no session data is returned. This is more useful for something where individual count timestamps are sufficient, such as with reference desk transactions. query/debugsessions A HTML display of the sessions query service. query/debugcounts A HTML display of the counts query service. GET parameters id: Initiative ID. sdate: Starting date range for query. If querying sessions, will return a session that overlaps with any part of the range, otherwise this will return only counts that are within the range. Format: YYYYMMDD, YYYYMMDDThhmm. edate: Ending date range for query. If querying sessions, will return a session that overlaps with any part of the range, otherwise this will return only counts that are within the range. Format: YYYYMMDD, YYYYMMDDThhmm. stime: Starting time slice (applies for all days in sdate/edate range). Format: hhmm (24-hour) etime: Ending time slice (applies for all days in sdate/edate range). Format: hhmm (24-hour) format: one of \"cal, cla, alc, lac, lca, ac, lc\" (see \"Return formats\" below). Default: \"cal\" sum: \"true\". If requesting a format where the count is at the deepest level (alc, lac, ac, lc), individual counts are combined where possible. While this does not preserve the timestamp for each count, it does result in a more compact set of data. Default: No summing. offset: Starting position of desired database result set limit: Maximum number of database rows to return (override server setting). The server config contains a default number of records to process per transaction. The analysis query library provides several methods to ease the process of stitching the full data set together across multiple requests. Increasing the limit will result in fewer requests to the server (improving performance), but it could also cause the Query Server process to exceed its memory limit, resulting in an error.","title":"API options"},{"location":"queryserver/#return-formats","text":"Data is returned as JSON. Format names describe the nesting order of the count data. Data associations can be lost in some formats, and most of these are provided for succinctness and processing convenience. C = Counts A = Activities L = Locations CAL/CLA This is the most complete representation of the data. For each count, its activities, locations, and initiatives are listed. ALC For each activity, the locations where the activity has been recorded are listed. For each of these locations, the counts are listed. This may be useful for reports that focus on where certain activities take place. LAC For each location, the activities that have been recorded there are listed. For each of the activities, the counts are listed. This may be useful for reports that focus on what types of activities occur in a given location. LCA For each location, the counts for that location are listed. For each of those counts, any activities associated with the count are listed. This is like LAC, but maintains associations between activities. AC For each activity, its counts are listed. You don't need any locations. LC For each location, its counts are listed. You don't need any activities.","title":"Return formats"},{"location":"quickstart/","text":"Quickstart Installation Please see the installation docs . Admin Tools Location trees Location trees are reusable across multiple initiatives. Be sure to create at least one location in each location tree. Navigate to the location editor Starting from the administrative dashboard (e.g. http://YOUR_HOST/sumaserver/admin), click on the \"Edit locations\" link. Create a location tree Click \"Create new location tree\" link to create a location tree. Enter a unique name and a description for the location tree. Select a location tree Using the drop-down near the top of the page, select an existing location tree (such as the one you just created). Click \"Display Locations.\" Create and name locations Click \"Add a location\" once for each new location you would like to create. On each location, click the \"Edit\" link to assign a name and description to a location, as well as to enable or disable an existing location. Note: New locations and changes to existing locations will not be saved until the \"Save Locations\" link is clicked. Reorder locations Click and hold on a location or location branch and drag it up and down to reorder the location tree. Nest locations Click and hold on a location or location branch and drag it right and left to nest it under another location. Disable locations Click the \"Edit\" link on a location and uncheck the \"Enabled\" option to disable a location. Note: In order to prevent data loss, locations can not be deleted. Disabling a location will suppress it in the data collection client. Save the location tree Save your changes by clicking the \"Save Locations\" link at the bottom of the page. Initiatives and activities Navigate to the initiative editor Starting from the administrative dashboard (e.g. http://YOUR_HOST/sumaserver/admin), click on the \"Edit initiatives\" link. Create an initiative Click the \"Create new initiative\" and enter a unique name and a description. Select an existing location tree for this initiative. Note: Every initiative must be associated with a location tree, and the selected location tree can not be changed later. More than one initiative can share the same location tree. Select an initiative Using the drop-down near the top of the page, select an existing initiative (such as the one you just created). Click \"Display Initiative.\" Add some activity groups Click \"Add Activity Group\" to create a new activity group with a single activity. Click \"Edit\" on the activity group to set the name, description, and other settings. Activity groups can be set to be required for data collection and can also specify whether member activities can be selected for the same count. Add some activities Click \"Add Activity\" on an activity group Click \"Edit\" on this new activity to set a title and description or to disable this activity. Reorder activities and activity groups Click and drag an activity or an activity group to reorder them or to move activities between activity groups. Disable an activity Click \"Edit\" on an activity to enable or disable this activity. Save the initiative Click \"Save Activities\" to save any changes to the initiative's activities. None of these changes will take effect until they are saved. Enable the initiative Click \"Enable Initiative\" to enable data collection using this new initiative. Collecting Data (Client) Start a collecting session Open the Suma client in a mobile or desktop browser Currently, the Suma client requires a WebKit-compatible browser (e.g. Chrome, Safari, or Opera). Select an initiative Under \"Select a collection program\" in the left sidebar, select one of your initiatives. Select a location Select a location for which to collect data in the sidebar. Note: data can only be collected for a terminal location (one without any child locations). Select any relevant activities If this initiative contains activities, select any activities that apply to this specific count. Count! Hit the large \"Count\" button to record a single count with the location and activities you selected. The time will be recorded automatically. Should you need to remove a count or an entire session before you finish collecting, there are buttons to support this in the header. Finish counting Click \"Finish Collecting\" to complete the session and attempt to send the data to the server. Note: All data will be retained in the browser until it is successfully sent to the server. This data should be retained even after restarting the browser, or closing the browser without finishing the collection. The client will attempt to send the data to the server each time you reload the Suma client or finish collecting.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"Please see the installation docs .","title":"Installation"},{"location":"quickstart/#admin-tools","text":"","title":"Admin Tools"},{"location":"quickstart/#location-trees","text":"Location trees are reusable across multiple initiatives. Be sure to create at least one location in each location tree.","title":"Location trees"},{"location":"quickstart/#navigate-to-the-location-editor","text":"Starting from the administrative dashboard (e.g. http://YOUR_HOST/sumaserver/admin), click on the \"Edit locations\" link.","title":"Navigate to the location editor"},{"location":"quickstart/#create-a-location-tree","text":"Click \"Create new location tree\" link to create a location tree. Enter a unique name and a description for the location tree.","title":"Create a location tree"},{"location":"quickstart/#select-a-location-tree","text":"Using the drop-down near the top of the page, select an existing location tree (such as the one you just created). Click \"Display Locations.\"","title":"Select a location tree"},{"location":"quickstart/#create-and-name-locations","text":"Click \"Add a location\" once for each new location you would like to create. On each location, click the \"Edit\" link to assign a name and description to a location, as well as to enable or disable an existing location. Note: New locations and changes to existing locations will not be saved until the \"Save Locations\" link is clicked.","title":"Create and name locations"},{"location":"quickstart/#reorder-locations","text":"Click and hold on a location or location branch and drag it up and down to reorder the location tree.","title":"Reorder locations"},{"location":"quickstart/#nest-locations","text":"Click and hold on a location or location branch and drag it right and left to nest it under another location.","title":"Nest locations"},{"location":"quickstart/#disable-locations","text":"Click the \"Edit\" link on a location and uncheck the \"Enabled\" option to disable a location. Note: In order to prevent data loss, locations can not be deleted. Disabling a location will suppress it in the data collection client.","title":"Disable locations"},{"location":"quickstart/#save-the-location-tree","text":"Save your changes by clicking the \"Save Locations\" link at the bottom of the page.","title":"Save the location tree"},{"location":"quickstart/#initiatives-and-activities","text":"","title":"Initiatives and activities"},{"location":"quickstart/#navigate-to-the-initiative-editor","text":"Starting from the administrative dashboard (e.g. http://YOUR_HOST/sumaserver/admin), click on the \"Edit initiatives\" link.","title":"Navigate to the initiative editor"},{"location":"quickstart/#create-an-initiative","text":"Click the \"Create new initiative\" and enter a unique name and a description. Select an existing location tree for this initiative. Note: Every initiative must be associated with a location tree, and the selected location tree can not be changed later. More than one initiative can share the same location tree.","title":"Create an initiative"},{"location":"quickstart/#select-an-initiative","text":"Using the drop-down near the top of the page, select an existing initiative (such as the one you just created). Click \"Display Initiative.\"","title":"Select an initiative"},{"location":"quickstart/#add-some-activity-groups","text":"Click \"Add Activity Group\" to create a new activity group with a single activity. Click \"Edit\" on the activity group to set the name, description, and other settings. Activity groups can be set to be required for data collection and can also specify whether member activities can be selected for the same count.","title":"Add some activity groups"},{"location":"quickstart/#add-some-activities","text":"Click \"Add Activity\" on an activity group Click \"Edit\" on this new activity to set a title and description or to disable this activity.","title":"Add some activities"},{"location":"quickstart/#reorder-activities-and-activity-groups","text":"Click and drag an activity or an activity group to reorder them or to move activities between activity groups.","title":"Reorder activities and activity groups"},{"location":"quickstart/#disable-an-activity","text":"Click \"Edit\" on an activity to enable or disable this activity.","title":"Disable an activity"},{"location":"quickstart/#save-the-initiative","text":"Click \"Save Activities\" to save any changes to the initiative's activities. None of these changes will take effect until they are saved.","title":"Save the initiative"},{"location":"quickstart/#enable-the-initiative","text":"Click \"Enable Initiative\" to enable data collection using this new initiative.","title":"Enable the initiative"},{"location":"quickstart/#collecting-data-client","text":"","title":"Collecting Data (Client)"},{"location":"quickstart/#start-a-collecting-session","text":"Open the Suma client in a mobile or desktop browser Currently, the Suma client requires a WebKit-compatible browser (e.g. Chrome, Safari, or Opera).","title":"Start a collecting session"},{"location":"quickstart/#select-an-initiative_1","text":"Under \"Select a collection program\" in the left sidebar, select one of your initiatives.","title":"Select an initiative"},{"location":"quickstart/#select-a-location","text":"Select a location for which to collect data in the sidebar. Note: data can only be collected for a terminal location (one without any child locations).","title":"Select a location"},{"location":"quickstart/#select-any-relevant-activities","text":"If this initiative contains activities, select any activities that apply to this specific count.","title":"Select any relevant activities"},{"location":"quickstart/#count","text":"Hit the large \"Count\" button to record a single count with the location and activities you selected. The time will be recorded automatically. Should you need to remove a count or an entire session before you finish collecting, there are buttons to support this in the header.","title":"Count!"},{"location":"quickstart/#finish-counting","text":"Click \"Finish Collecting\" to complete the session and attempt to send the data to the server. Note: All data will be retained in the browser until it is successfully sent to the server. This data should be retained even after restarting the browser, or closing the browser without finishing the collection. The client will attempt to send the data to the server each time you reload the Suma client or finish collecting.","title":"Finish counting"},{"location":"troubleshooting/","text":"Troubleshooting Client Errors iOS WebSQL error The latest iOS version deprecates WebSQL which the Suma client depends on to work. If you are using iOS version 13 or above, and are running into an error in the Suma collection client that says \"Error in browser (Web SQL) database setup...\" see the bottom of this page for a workaround to turn WebSQL back on: https://blog.appstudio.dev/2019/09/the-future-of-sqlite/ See this GitHub issue for more information and discussion on steps forward for the client: https://github.com/suma-project/Suma/issues/88 Configuration Errors Server Environment Suma depends upon a number of PHP libraries that are often named different things in different server environments. If you are experiencing unexpected issues after installing Suma, please check your server logs for clues to missing PHP modules. Suma Server Configuration Issues with the SUMA_SERVER_PATH will be reported as a Possible error in SUMA_SERVER_PATH . An Invalid controller specified (error) may indicate an issue with the SUMA_CONTROLLER_PATH and will also be reported as a Possible error in SUMA_CONTROLLER_PATH . Issues SUMA_BASE_URL will be reported as a 404 Not Found error. Suma on SELinux Suma Log Path Ordinarily to set up read/write permissions on the log path, you just need to identify the group that the apache user belongs to, add the log file and its parent folders to that group, and then give the group write permissions. Something like this: chgrp apache /var/www/html/suma chmod 775 /var/www/html/suma chgrp apache /var/www/html/suma/log chmod 775 /var/www/html/suma/log touch /var/www/html/suma/log/sumaserver.log chgrp apache /var/www/html/suma/log/sumaserver.log chmod 775 /var/www/html/suma/log/sumaserver.log That assumes that your apache user\u2019s group is \u201capache\u201d (on Debian-based systems the default is www-data), and that the path to your Suma client installation is /var/www/html/suma (which will vary according to where you installed it). Ordinarily, that would be enough, and the file should be there and writable. But in the case of SELinux, there is a complication. SELinux is a security layer used by Red Hat Enterprise Linux and CentOS. Among other things, SELinux restricts read/write access to files by the Apache process even when the file permissions are otherwise correct, which cause Suma not to work correctly. Correcting it requires running some additional commands: chcon -t httpd_sys_rw_content_t /var/www/html/suma chcon -t httpd_sys_rw_content_t /var/www/html/suma/log chcon -t httpd_sys_rw_content_t /var/www/html/suma/log/sumaserver.log The command sets the \u201csecurity context\u201d of the files to designate them as files that Apache is allowed to read and write. That should persuade SELinux that yes, it really is OK for Suma to write its own log file. (Thanks to Will Martin of the University of North Dakota.) GitHub Issues Closed Suma issues on Github may also be a good source of information for troubleshooting your installation.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#client-errors","text":"","title":"Client Errors"},{"location":"troubleshooting/#ios-websql-error","text":"The latest iOS version deprecates WebSQL which the Suma client depends on to work. If you are using iOS version 13 or above, and are running into an error in the Suma collection client that says \"Error in browser (Web SQL) database setup...\" see the bottom of this page for a workaround to turn WebSQL back on: https://blog.appstudio.dev/2019/09/the-future-of-sqlite/ See this GitHub issue for more information and discussion on steps forward for the client: https://github.com/suma-project/Suma/issues/88","title":"iOS WebSQL error"},{"location":"troubleshooting/#configuration-errors","text":"","title":"Configuration Errors"},{"location":"troubleshooting/#server-environment","text":"Suma depends upon a number of PHP libraries that are often named different things in different server environments. If you are experiencing unexpected issues after installing Suma, please check your server logs for clues to missing PHP modules.","title":"Server Environment"},{"location":"troubleshooting/#suma-server-configuration","text":"Issues with the SUMA_SERVER_PATH will be reported as a Possible error in SUMA_SERVER_PATH . An Invalid controller specified (error) may indicate an issue with the SUMA_CONTROLLER_PATH and will also be reported as a Possible error in SUMA_CONTROLLER_PATH . Issues SUMA_BASE_URL will be reported as a 404 Not Found error.","title":"Suma Server Configuration"},{"location":"troubleshooting/#suma-on-selinux","text":"","title":"Suma on SELinux"},{"location":"troubleshooting/#suma-log-path","text":"Ordinarily to set up read/write permissions on the log path, you just need to identify the group that the apache user belongs to, add the log file and its parent folders to that group, and then give the group write permissions. Something like this: chgrp apache /var/www/html/suma chmod 775 /var/www/html/suma chgrp apache /var/www/html/suma/log chmod 775 /var/www/html/suma/log touch /var/www/html/suma/log/sumaserver.log chgrp apache /var/www/html/suma/log/sumaserver.log chmod 775 /var/www/html/suma/log/sumaserver.log That assumes that your apache user\u2019s group is \u201capache\u201d (on Debian-based systems the default is www-data), and that the path to your Suma client installation is /var/www/html/suma (which will vary according to where you installed it). Ordinarily, that would be enough, and the file should be there and writable. But in the case of SELinux, there is a complication. SELinux is a security layer used by Red Hat Enterprise Linux and CentOS. Among other things, SELinux restricts read/write access to files by the Apache process even when the file permissions are otherwise correct, which cause Suma not to work correctly. Correcting it requires running some additional commands: chcon -t httpd_sys_rw_content_t /var/www/html/suma chcon -t httpd_sys_rw_content_t /var/www/html/suma/log chcon -t httpd_sys_rw_content_t /var/www/html/suma/log/sumaserver.log The command sets the \u201csecurity context\u201d of the files to designate them as files that Apache is allowed to read and write. That should persuade SELinux that yes, it really is OK for Suma to write its own log file. (Thanks to Will Martin of the University of North Dakota.)","title":"Suma Log Path"},{"location":"troubleshooting/#github-issues","text":"Closed Suma issues on Github may also be a good source of information for troubleshooting your installation.","title":"GitHub Issues"},{"location":"upgrade_1.0/","text":"Suma 1.0 Upgrade Instructions Overview This document outlines how to upgrade Suma to version 1.0. Upgrading is only necessary if you have previously installed a Suma version less than v1.0. The general Suma installation instructions have been updated to reflect v1.0 and should be referenced as needed. The most significant structural change in v1.0 is where the various configuration settings are stored. We also moved to YAML for most of our configuration files in order to reduce the likelihood of introducing errors when updating Suma. Notes on YAML Here are some general notes on using the YAML config files: Quotes are not necessary for paths Do not insert comments inside of the YAML tree. Backup You will need to reference the settings in your current installation. Backup these five files from your existing installation: service/config/config.ini service/web/index.php analysis/lib/php/ServerIO.php analysis/reports/nightly/nightly_config.php web/spaceassess.js Upgrade Depending upon your installation method, either copy the updated Suma files into place or pull the changes from Github (preferred). Configuration Options to Update The various configuration settings are listed below as PREVIOUS_FILE => NEW_CONFIG_FILE . Please refer to your current installation paths and the install docs to retrieve paths like SUMA_SERVER_INSTALL_DIR . service/config/config.ini => service/config/config.yaml Most of the old settings will need to be moved into config.yaml . Please note the new format. Refer to the instructions below for creating config.yaml . Alternatively, you can also copy the config.ini back to the service/config directory, but the config.ini format is deprecated in Suma and support for it may be removed in the future. From the installation docs: In the SUMA_SERVER_INSTALL_DIR/config/ directory, copy config_example.yaml to a new file config.yaml . You must modify the following: production: sumaserver: db: host: host location of your mysql database dbname: suma mysql database name user: suma mysql **application** account name pword: suma mysql **application** account password port: mysql port number log: path: path to log directory name: sumaserver.log service/web/index.php => service/web/config.yaml Copy the SUMA_SERVER_PATH , SUMA_CONTROLLER_PATH , SUMA_BASE_URL , and SUMA_DEBUG configuration settings into the appropriate fields of service/web/config.yaml. Refer to the instructions below for creating config.yaml . From the installation docs: In the /SUMA_SERVER_INSTALL_DIR/web/config/ directory, copy config_example.yaml to a new file config.yaml . You must set some path variables in the config.yaml file for the Suma server to function correctly. SUMA_SERVER_PATH must be set to the SUMA_SERVER_INSTALL_DIR where the Suma server was installed earlier in these instructions (e.g. /var/www/app/sumaserver ). SUMA_CONTROLLER_PATH must be set to SUMA_SERVER_INSTALL_DIR/controllers (e.g. /var/www/app/sumaserver/controllers ). SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver . SUMA_DEBUG can be set to true if you would like to see more verbose error messages. This should generally be set to false . analysis/lib/php/ServerIO.php => analysis/config/config.yaml Copy the private $_baseUrl configuration settings into the the baseUrl field of analysis/config/config.yaml . Refer to the instructions below for creating config.yaml . From the installation docs: In the YOUR_WEB_DIR/suma/analysis/config/ directory, copy config_example.yaml to a new file config.yaml . Change baseUrl to the URL for your Suma Query Server. If you used a directory other than sumaserver in the \"Suma Software Installation\" section above, that should be reflected in this URL. analysis/reports/nightly/nightly_config.php => analysis/config/config.yaml In the same config.yaml file created in the previous step, copy your settings from nightly_config.php as such: Copy DEFAULT_TIMEZONE to timezone Copy DAY_DISPLAY to displayFormat Copy ERROR_RECIPIENTS to errorRecipients Copy RECIPIENTS to recipients From the installation docs: To configure the nightly summary report: In the YOUR_WEB_DIR/suma/analysis/config/config.yaml file, edit the timezone, displayFormat, recipients, and errorRecipients as needed. See http://php.net/manual/en/timezones.php for information on timezone formats. Using cron, or some other scheduler, schedule a task to run the YOUR_WEB_DIR/suma/analysis/reports/nightly/nightlyEmail.php script as desired. Alternatively, YOUR_WEB_DIR/suma/analysis/reports/nightly/nightly.php may be run from the command line for quick reporting through stdout. web/spaceassess.js => web/config/spaceassessConfig.js Copy the paths baseInitUrl , initiativeUrl , and syncUrl from spaceassess.js to the appropriate paths in web/config/spaceassessConfig.js . Refer to the instructions below for creating spaceassessConfig.js . From the installation docs: In the YOUR_WEB_DIR/suma/web/config/ directory, copy spaceassessConfig_example.js to a new file spaceassessConfig.js . If the Suma server URL is anything other than http://YOUR_HOST/sumaserver , you will need to change the paths at the top of YOUR_WEB_DIR/suma/web/config/spaceassessConfig.js .","title":"Upgrade 1.0"},{"location":"upgrade_1.0/#suma-10-upgrade-instructions","text":"","title":"Suma 1.0 Upgrade Instructions"},{"location":"upgrade_1.0/#overview","text":"This document outlines how to upgrade Suma to version 1.0. Upgrading is only necessary if you have previously installed a Suma version less than v1.0. The general Suma installation instructions have been updated to reflect v1.0 and should be referenced as needed. The most significant structural change in v1.0 is where the various configuration settings are stored. We also moved to YAML for most of our configuration files in order to reduce the likelihood of introducing errors when updating Suma.","title":"Overview"},{"location":"upgrade_1.0/#notes-on-yaml","text":"Here are some general notes on using the YAML config files: Quotes are not necessary for paths Do not insert comments inside of the YAML tree.","title":"Notes on YAML"},{"location":"upgrade_1.0/#backup","text":"You will need to reference the settings in your current installation. Backup these five files from your existing installation: service/config/config.ini service/web/index.php analysis/lib/php/ServerIO.php analysis/reports/nightly/nightly_config.php web/spaceassess.js","title":"Backup"},{"location":"upgrade_1.0/#upgrade","text":"Depending upon your installation method, either copy the updated Suma files into place or pull the changes from Github (preferred).","title":"Upgrade"},{"location":"upgrade_1.0/#configuration-options-to-update","text":"The various configuration settings are listed below as PREVIOUS_FILE => NEW_CONFIG_FILE . Please refer to your current installation paths and the install docs to retrieve paths like SUMA_SERVER_INSTALL_DIR . service/config/config.ini => service/config/config.yaml Most of the old settings will need to be moved into config.yaml . Please note the new format. Refer to the instructions below for creating config.yaml . Alternatively, you can also copy the config.ini back to the service/config directory, but the config.ini format is deprecated in Suma and support for it may be removed in the future. From the installation docs: In the SUMA_SERVER_INSTALL_DIR/config/ directory, copy config_example.yaml to a new file config.yaml . You must modify the following: production: sumaserver: db: host: host location of your mysql database dbname: suma mysql database name user: suma mysql **application** account name pword: suma mysql **application** account password port: mysql port number log: path: path to log directory name: sumaserver.log service/web/index.php => service/web/config.yaml Copy the SUMA_SERVER_PATH , SUMA_CONTROLLER_PATH , SUMA_BASE_URL , and SUMA_DEBUG configuration settings into the appropriate fields of service/web/config.yaml. Refer to the instructions below for creating config.yaml . From the installation docs: In the /SUMA_SERVER_INSTALL_DIR/web/config/ directory, copy config_example.yaml to a new file config.yaml . You must set some path variables in the config.yaml file for the Suma server to function correctly. SUMA_SERVER_PATH must be set to the SUMA_SERVER_INSTALL_DIR where the Suma server was installed earlier in these instructions (e.g. /var/www/app/sumaserver ). SUMA_CONTROLLER_PATH must be set to SUMA_SERVER_INSTALL_DIR/controllers (e.g. /var/www/app/sumaserver/controllers ). SUMA_BASE_URL must be set to the URL path for the Suma server. For example, if the URL is http://YOUR_HOST/sumaserver , set this to /sumaserver . SUMA_DEBUG can be set to true if you would like to see more verbose error messages. This should generally be set to false . analysis/lib/php/ServerIO.php => analysis/config/config.yaml Copy the private $_baseUrl configuration settings into the the baseUrl field of analysis/config/config.yaml . Refer to the instructions below for creating config.yaml . From the installation docs: In the YOUR_WEB_DIR/suma/analysis/config/ directory, copy config_example.yaml to a new file config.yaml . Change baseUrl to the URL for your Suma Query Server. If you used a directory other than sumaserver in the \"Suma Software Installation\" section above, that should be reflected in this URL. analysis/reports/nightly/nightly_config.php => analysis/config/config.yaml In the same config.yaml file created in the previous step, copy your settings from nightly_config.php as such: Copy DEFAULT_TIMEZONE to timezone Copy DAY_DISPLAY to displayFormat Copy ERROR_RECIPIENTS to errorRecipients Copy RECIPIENTS to recipients From the installation docs: To configure the nightly summary report: In the YOUR_WEB_DIR/suma/analysis/config/config.yaml file, edit the timezone, displayFormat, recipients, and errorRecipients as needed. See http://php.net/manual/en/timezones.php for information on timezone formats. Using cron, or some other scheduler, schedule a task to run the YOUR_WEB_DIR/suma/analysis/reports/nightly/nightlyEmail.php script as desired. Alternatively, YOUR_WEB_DIR/suma/analysis/reports/nightly/nightly.php may be run from the command line for quick reporting through stdout. web/spaceassess.js => web/config/spaceassessConfig.js Copy the paths baseInitUrl , initiativeUrl , and syncUrl from spaceassess.js to the appropriate paths in web/config/spaceassessConfig.js . Refer to the instructions below for creating spaceassessConfig.js . From the installation docs: In the YOUR_WEB_DIR/suma/web/config/ directory, copy spaceassessConfig_example.js to a new file spaceassessConfig.js . If the Suma server URL is anything other than http://YOUR_HOST/sumaserver , you will need to change the paths at the top of YOUR_WEB_DIR/suma/web/config/spaceassessConfig.js .","title":"Configuration Options to Update"},{"location":"upgrade_2.0/","text":"Suma 2.0 Upgrade Instructions Overview This document outlines how to upgrade Suma to version 2.0. Upgrading is only necessary if you have previously installed a Suma version less than v2.0. The general Suma installation instructions have been updated to reflect v2.0 and should be referenced as needed. The most significant addition to v2.0 is the use of Angular JS for the analysis and reporting tools. However, ALL components of Suma should be updated. If you are already using Suma v1.0 or higher, updating should be a simple process. If you are updating from a Suma version earlier than v1.0, please refer to the Version 1.0 Upgrade Docs as necessary. Upgrade Depending upon your installation method, either copy the updated Suma files into place or pull the changes from GitHub (preferred). Notes Nightly Reports Any existing scheduled jobs (cron) for the nightly report will need to be updated to use YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php .","title":"Upgrade 2.0"},{"location":"upgrade_2.0/#suma-20-upgrade-instructions","text":"","title":"Suma 2.0 Upgrade Instructions"},{"location":"upgrade_2.0/#overview","text":"This document outlines how to upgrade Suma to version 2.0. Upgrading is only necessary if you have previously installed a Suma version less than v2.0. The general Suma installation instructions have been updated to reflect v2.0 and should be referenced as needed. The most significant addition to v2.0 is the use of Angular JS for the analysis and reporting tools. However, ALL components of Suma should be updated. If you are already using Suma v1.0 or higher, updating should be a simple process. If you are updating from a Suma version earlier than v1.0, please refer to the Version 1.0 Upgrade Docs as necessary.","title":"Overview"},{"location":"upgrade_2.0/#upgrade","text":"Depending upon your installation method, either copy the updated Suma files into place or pull the changes from GitHub (preferred).","title":"Upgrade"},{"location":"upgrade_2.0/#notes","text":"Nightly Reports Any existing scheduled jobs (cron) for the nightly report will need to be updated to use YOUR_WEB_DIR/suma/analysis/reports/lib/php/nightlyEmail.php .","title":"Notes"}]}